// In lib/screens/quiz_screen.dart

import 'package:flutter/material.dart';
import 'package:quiz_app/data/dummy_questions.dart';
import 'package:quiz_app/widgets/answer_button.dart';
import 'package:quiz_app/screens/results_screen.dart';

class QuizScreen extends StatefulWidget {
  const QuizScreen({super.key, required this.userName});

  final String userName;

  @override
  State<QuizScreen> createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen> {
  // This holds the index of the question being displayed
  var _currentQuestionIndex = 0;
  // This list will store the user's answers
  final List<String> _selectedAnswers = [];

  void _answerQuestion(String selectedAnswer) {
  // Record the answer (This is the part you already have)
  _selectedAnswers.add(selectedAnswer);

  // --- ADD THIS LOGIC BELOW ---

  // Check if the quiz is over
  if (_selectedAnswers.length == questions.length) {
    // Quiz is over, navigate to results screen
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => ResultsScreen(
          userName: widget.userName,
          chosenAnswers: _selectedAnswers,
        ),
      ),
    );
  } else {
    // Go to the next question
    setState(() {
      _currentQuestionIndex++;
    });
  }
}

  @override
  Widget build(BuildContext context) {
    // Get the current question from our data list
    final currentQuestion = questions[_currentQuestionIndex];

    return Scaffold(
      body: Center(
        // LayoutBuilder ensures our padding is responsive
        child: LayoutBuilder(
          builder: (context, constraints) {
            return Container(
              // Use a percentage of screen width for padding
              padding: EdgeInsets.symmetric(horizontal: constraints.maxWidth * 0.1),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.stretch, // Makes buttons fill width
                children: [
                  Text(
                    currentQuestion.text,
                    style: const TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                      color: Color.fromARGB(255, 3, 1, 65), // Assuming a dark background later
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 30),

                  // ... (the "spread" operator)
                  // This takes the list of widgets generated by .map()
                  // and "spreads" them out as individual widgets in the Column.
                  ...currentQuestion.getShuffledAnswers().map((answer) {
                    return AnswerButton(
                      answerText: answer,
                      onTap: () {
                        _answerQuestion(answer);
                      },
                    );
                  }),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}